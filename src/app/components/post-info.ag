<script lang="ts">
  // @ts-nocheck
  import { NgIcon } from '@ng-icons/core' with { analog: 'imports' };
  import { RouterLink } from '@angular/router' with { analog: 'imports' };
  import { NgOptimizedImage } from '@angular/common' with { analog: 'imports' };
  import { provideIcons } from '@ng-icons/core';
  import { input, computed } from '@angular/core';
  import { FrontMatter } from '@utils/frontmatter';
  import { format, formatISO } from 'date-fns';
  import ptBR from 'date-fns/locale/pt-BR';
  import {
    faCalendar,
    faClock,
  } from '@ng-icons/font-awesome/regular';
  import { faSolidMusic, faSolidTags } from '@ng-icons/font-awesome/solid';

  type Info = Pick<FrontMatter, 'createAt' | 'timeToRead' | 'music' | 'tags'>;

  const info = input.required<Info>();

  const formattedDateISO = computed(() => formatISO(info().createAt));
  const formattedDateShort = computed(() => format(info().createAt, `d 'de' MMMM 'de' yyyy`, { locale: ptBR }));
  const formattedDateLong = computed(() => {
    const dayOfWeek = format(info().createAt, 'EEEE', { locale: ptBR });
    const prefix = ['sÃ¡bado', 'domingo'].includes(dayOfWeek) ? 'no' : 'na';
    return format(info().createAt, `'Postado ${prefix}' EEEE, d 'de' MMMM 'de' yyyy`, { locale: ptBR });
  });
  const formattedReadTime = computed(() => {
    const { minutes } = info().timeToRead;
    return `Leia em ${minutes} minuto${minutes > 1 ? 's' : ''}`;
  });
  const formattedTags = computed(() => info().tags?.join(', '));

  const music = computed(() => info().music ?? { title: '', url: '' });
  const tags = computed(() => info().tags ?? []);

  defineMetadata({
    viewProviders: [provideIcons({
      faCalendar,
      faClock,
      faSolidMusic,
      faSolidTags,
    })],
  });
</script>

<template>
  <div class="post-date">
    <ng-icon name="faCalendar" />
    <time [attr.datetime]="formattedDateISO()" class="post-date-long">{{ formattedDateLong() }}</time>
    <time [attr.datetime]="formattedDateISO()" class="post-date-short">{{ formattedDateShort() }}</time>
  </div>
  <div class="post-read-time">
    <ng-icon name="faClock" />
    <span>{{ formattedReadTime() }}</span>
  </div>
  <div class="post-music">
    <ng-icon name="faSolidMusic" />
    <span>Ouvindo </span>
    <a [href]="music().url" rel="noopener noreferrer" target="_blank">
      <span>{{ music().title }}</span>
    </a>
  </div>
  <div class="post-tags">
    <ng-icon name="faSolidTags" />
    @for (tag of tags(); track tag) {
      <a [class]="tag" [routerLink]="['/blog/tags/', tag]">{{ tag }}</a>
    }
  </div>
</template>

<style>
  :host {
    display: flex;
    flex-direction: column;
    gap: 12px;
    --ng-icon__size: calc(var(--post-info__font-size, 1rem) + 0.1rem);
    div {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: flex-start;
      gap: 12px;
      ng-icon  {
        flex: 0 0 var(--ng-icon__size);
        vertical-align: text-top;
      }
      * {
        font-size: var(--post-info__font-size, 1rem);
        font-family: var(--font-serif);
      }
    }
  }
  .post-date{
    .post-date-short {
      display: none;
    }
    .post-date-long {
      display: block;
    }
     @media (max-width: 425px) {
      .post-date-long {
        display: none;
      }
      .post-date-short {
        display: block;
      }
    }
  }

  .post-music {
     a {
      color: var(--color3-light);
      transition: color 0.5s;
      line-height: 1.4;
      display: -webkit-box;
      -webkit-line-clamp: 1;
      -webkit-box-orient: vertical;
      overflow: hidden;
      text-overflow: ellipsis;

      &:hover {
        text-decoration: underline dashed;
        text-decoration-thickness: 0.1rem;
        text-underline-offset: 0.2rem;
      }
    }
    @media (max-width: 425px) {
      & > span {
        display: none;
      }
    }

  }
  .post-tags {
    --tag-color: hsl(0, 100%, 70%);
    a {
      font-family: var(--font-serif);
      text-transform: capitalize;
      font-weight: 800;
      font-size: calc(var(--post-info__font-size, 1rem) - 0.1rem);
      border-width: 1px;
      border-style: solid;
      border-color:  var(--tag-color);
      color: var(--tag-color);
      border-radius: 80px;
      padding: 0.3rem 1rem;
      background-color: hsl(from var(--tag-color) h s 95%);
      @media (prefers-color-scheme: dark) {
        background-color: hsl(from var(--tag-color) h s 15%);
      }
      &:hover, &:focus {
        border-color: var(--tag-color);
        background-color: var(--tag-color);
        color: light-dark(white, black);
      }
    }
    .angular {
      --tag-color: hsl(348, 100%, 61%);
    }
    .nodejs {
      --tag-color: hsl(128, 100%, 30%);
      @media (prefers-color-scheme: dark) {
        --tag-color: hsl(128, 100%, 40%);
      }
    }
    .typescript {
      --tag-color: hsl(204, 86%, 53%);
    }
    .jekyll {
      --tag-color: hsl(48, 40%, 45%);
      @media (prefers-color-scheme: dark) {
        --tag-color: hsl(48, 100%, 50%);
      }
    }
    .php {
      --tag-color: hsl(200, 100%, 50%);
      text-transform: uppercase;
    }
  }
</style>
